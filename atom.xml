<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-20T09:25:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leon (有问题请到https://github.com/leonliu315/leonliu315.github.io/issues)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于go的并发map</title>
    <link href="http://yoursite.com/2016/10/20/go-concurrent/"/>
    <id>http://yoursite.com/2016/10/20/go-concurrent/</id>
    <published>2016-10-20T06:24:33.000Z</published>
    <updated>2016-10-20T09:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;自从使用go以来，一直都觉得用起来非常的舒服，用来工作真的是很合适的语言，不过我自己开发的工具大部分还是用pyhon，和python不同的是，python由于GIL的存在，对于是否在一个程序里拥有多厉害的并发能力并不需要太纠结，go对底层良好的封装，并发的时候也是处于真实并行的状态。不过go一直没有在基础的数据结构和库里提供类似java的并发map一样的功能，大概因为官方一直提倡通过通讯来共享内存，大部分情况下加锁就可以满足需求，不过有几种情况可能会比较痛苦，一种是有大量的遍历的需求，一种就是真的有大量的并发需求，所以我自己尝试编写了两个相关的模块<a href="https://github.com/leonliu315/go-concurrent" target="_blank" rel="external">https://github.com/leonliu315/go-concurrent</a>，map是根据java里相关功能实现的，相当于是翻译过来，并发map原理就是分段进行锁操作，降低锁的争抢的激烈程度来达到提高性能的目的，另一个则是一个并发的skiplist，和java里的不同，这个skiplist的实现并没有采用cas，因为使用cas的复杂度太高，由于链表本身是并发友好的数据结构，原理也很简单，就是锁住数据的前继和后继即可，相当于只影响前后两个相关数据，而且操作数据的时间是固定的，所以大并发的时候对性能比用单一锁定的影响更小，skiplist的迭代操作也是线程安全的，不过skiplist的性能是O(lgn)，数据量比较大的情况下性能可能是不如hashmap的。<br>&emsp;&emsp;并发数据结构使用的时候需要注意，他们都是弱一致性的，也就是说有可能会读到脏数据，就程度来说skiplist要小于hashmap，经过测试，一般情况下都是不需要使用这两个模块的，因为大部分时候性能是不如非线程安全的数据结构。如果并发程度已经成为了瓶颈才需要考虑换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;自从使用go以来，一直都觉得用起来非常的舒服，用来工作真的是很合适的语言，不过我自己开发的工具大部分还是用pyhon，和python不同的是，python由于GIL的存在，对于是否在一个程序里拥有多厉害的并发能力并不需要太纠结，go对底层良好的封装，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/12/hello-world/"/>
    <id>http://yoursite.com/2016/10/12/hello-world/</id>
    <published>2016-10-12T06:24:33.000Z</published>
    <updated>2016-10-20T06:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World, and no plan for this, may be.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello World, and no plan for this, may be.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
